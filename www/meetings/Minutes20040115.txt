1. Roll Call (Y=present, R=regrets, N=absent)

Y	ATG	Jim Frost
Y	BEA Systems 	Manoj Cheenath 
Y	DevelopMentor	Kevin Jones
Y	IBM	Russell Butek
N	IONA Technologies PLC 	Daniel Kulp 
N	Motorola 	Rahul Sharma 
N	Nokia	Srividya Natarajan
Y	Novell, Inc. 	Bjarne Rasmussen 
R	NTT Data Corp	Toshiyuki Kimura 
Y	Oracle	Sunil Kunisetty
N	Pramati	Rajiv Shivane
N	SAP AG 	Chavdar Baikov 
N	SeeBeyond Technology Corp. 	Ugo Corda
R	Sonic	Glen Daniels
Y	Sosnoski Software	Dennis Sosnoski
Y	Sun	Marc Hadley
Y	Sun	Roberto Chinnici
R	Sun	Doug Kohlert
N	Tmax Soft	JaeWoong Chung
Y	WebMethods Corporation 	Christopher St. John

2. Agenda Review and AOB

3. Approval of Dec 18th telcon minutes

  - minutes approved with one change from Russel

4. Review action items

* Glen to circulate alternate proposal for dealing with protocol 
specific fault information on client and server side

  - pending

* Roberto to send note on DII enhancements / SAAJ overlap.

  - done

* Russel to send proposal for improving handler framework.

  - first draft done, will send out to EG soon, pending

* Marc to propose a refactoring for Call/AsyncCall

  - done

* Marc to contact the JSR-166 spec lead about Cancellable

  - Cancelable interface removed
  - Future contains all methods (including cancel())
  - Due to issues with J2EE

* Marc to raise new issue re Clarification of 
ServletEndpointContext.getMessageContext

  - done

* Roberto to raise issue about the interaction of polling (get) and 
callbacks

  - pending


5. F2F Update

  - 10th and 11th in MA
  - same time with JSR 208 and JAXB
  - JSR 208 F2F on 9th and 10th.
  - Sun to host the meeting
  - Meeting dates will be confirmed by the end of this week

6. Refactoring Call for asynchrony


(i) Should CallAsyncHandler.handleFault also have a CallResponse argument so
that it can determine the name of the operation and port type that failed ?

  - prefer to pass in CallInspect instead of just the method name

  - where to find the updated version of the proposal?
      - latest version available online ant java.net site.
      
  - EG agreed to add CallInspect to handleFault method

(ii) CallResponse contains a getReturnValue method so that Async clients can
obtain the return value. Having this method in CallResponse effectively adds
it as a method to the Call interface so clients can obtain the return value
either as the object returned from the invoke method or by using the
getReturnValue method. Is this a problem ?

  - leave it as it is.

(iii) With Call and CallAsync as separate interfaces we could use invoke
instead of startInvoke. Would this be more or less confusing ?

  - Use invoke on both Call and CallAsync
  - Change endCall to handleResponse() (Sunil) 


(i) Return type of CallAsync.invoke callback variant
AsyncResponse<?> or Future<?> or something else ?


  - AsyncResponse contains more APIs (like cancel) but Future is simple
  - return type for get() method is Object
  - Roberto prefers Condition than Future.
  - Decided to use AsyncResponse that extends from Future
    and Condition.

  - What will be the order in which Callback and 
    AsyncResponse.get/wait called? (Sunil)
  - JAXRPC need not specify any order. Both callback and
    asyncResponse will be waiting on the same condition (Roberto)
    
  - Object returned by AsyncResponse<?> should not be cast to anything.
    Spec will warn that casting the object is non-portable.

(ii) Thread Safety of Call, CallAsync

  - All agreed that Call is not thread safe
  - If multiple threads need to invoke the same method, one
    must use multiple instance of Call.
  - Call will have a clone() method. So no need to setup
    each call instance.


(iii) Do we adopt the CallSetup, CallInspect, CallResult, Call, 
CallAsync, CallResponse refactoring ?

  - Too many interfaces (Sunil)
  - Same instance of CallAsync can be used to do multiple invokes.
  - CallInspect that is returned by an invoke points to a copy of the 
    Call object. Hence the Call can be changed while a invoke is
    pending.
  - Every one agreed to keep the refactoring of Call interface.

Adjourned.