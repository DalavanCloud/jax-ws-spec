Agenda:

1. Roll Call, scribe for minutes selected from attached  list. 

(Y=present, R=regrets, N=absent)

R	ATG	Jim Frost
Y	BEA Systems 	Manoj Cheenath 
R	DevelopMentor	Kevin Jones
Y	IBM	Russell Butek
N	IONA Technologies PLC 	Daniel Kulp 
N	Motorola 	Rahul Sharma 
Y	Nokia	Srividya Natarajan
N	Novell, Inc. 	Bjarne Rasmussen 
N	NTT Data Corp	Toshiyuki Kimura 
Y	Oracle	Sunil Kunisetty
N	Pramati	Rajiv Shivane
N	SAP AG 	Chavdar Baikov 
N	SeeBeyond Technology Corp. 	Ugo Corda
N	Sonic	Glen Daniels
R	Sosnoski Software	Dennis Sosnoski
Y	Sun	Marc Hadley
R	Sun	Roberto Chinnici
Y	Sun	Doug Kohlert
N	Tmax Soft	JaeWoong Chung
N	WebMethods Corporation 	Christopher St. John


2. Agenda Review and AOB 

Agreed. No changes to the agenda. 

3. Approval of Jan 22nd telcon minutes

See 
https://jsr224.dev.java.net/meetings/Minutes20040122.txt 

Approved. 

4. Review action items

See https://jsr224.dev.java.net/ 

*  Glen to circulate alternate proposal for dealing with  protocol 
specific fault information on client and server side

Pending. Glen to send something soon. 

· Russell to send proposal for improving handler framework.

Done. Mail was sent on 27th. 

* Dennis to write something up on linking the JAXB and 
JAX-RPC 
frameworks. 

Done. Dennis started some mail discussions on 222 & 224 MLs. 

5. DII Futures

Marc briefed  his radical Call2 proposal. 

Sunil: Why not have both in the spec.? 
Marc: Old one is rpc/encoded and we seem to have too many problems 
          with it. Simpler to have one in the 2.0 spec. 

Straw Poll: 
Option 1: Keep the current API and fix any problems and do enhancements 
Option 2: Start with the literal-centric Call2 based API. 
Option 3: Undecided 

Option 1: No takers 
Option 2: Russell (IBM), Doug (SUN), Manoj (BEA), Marc (SUN), Sunil (oracle) 
Option 3: Srividya (Nokia) 
 

We need to decide whether to keep and fix the current DII Call API or 
whether to reposition it as a legacy API for use with SOAP Encoding and 
work on a new API that is more literal friendly. We'll work through the 
two lists of problems below and use these to decide which approach will 
yield the best result.

Russel's list of problems

1. Call API is not DII - it requires generated code - it is more like 
portable stubs - it doesn't seem to buy us much more than a dynamic 
proxy does.

Russell:Call2 better addresses this problem 
Marc: Agree 

2. Holders should be allowed/required in invoke param list 
- wrapped  style doesn't work without them and it's closer to the 
  Java look-and-feel.

Russell: Is not an issue with Call2 

3. If we apply 2, then there's no point in having 
getOutputParams and getOutputValues. 

Russell: Goes away in the new proposal

4. We need a way to set up parameters with qualified names: 
addParameter(QName name, ...) instead of 
addParameter(String name, 
...).

Russell: Still will be an issue 
Marc: We need to be able to pass the namespace context between JAX-RPC 
          and JAX-B and thus the elements will be namespace qualified 
Sunil: What about for rpc/lit with multi parts with local namespaces 
Marc: Will  synthesize this with  JAXB with global qname element with 
         un-qualified parts 

Sunil: Oracle prefers to have a flavour of invoke which take an Element[] corresponding 
          to different parts for rpc/lit with multi part case, such as: 
                invoke (String opName, Element[]) 
Marc: It should be fairly simple to constuct the wrapper element and it will less 
           confusing  to just have one call that takes the entire SOAPBody Content. 
           If need arise, one can always use JAX-B type Element. 
Russell: More DIIish. Agree with Marc 

ACTION ITEM for Marc to write some examples 
 

5. isParameterAndReturnSpecRequired is not a good design.

Russell: Goes away in the new proposal 

6. The behavior of Call.invoke("opName", ...) is not well defined (I 
came up with 5 possible interpretations). We decided most of us 
implement it as if the user called setOperationName("opName");invoke(params); 
so we've suggested deprecating this invoke method as redundant and confusing. 

Russell: Goes away in the new proposal 

7. There is no way to send attachments with the Call API. 
We need  something like addAttachmentParameter(QName paramName, 
String mimeType,  Class javaType, ParameterMode mode) and 
setAttachmentReturnType(String mimeType, Class javaType), then we can 
send the attachment object in  the invoke parameter array and receive them 
in the return or in  getOutputParams. Do we also need a way to send 
unreferenced attachments  (those not appearing in the WSDL?).

Russell: Still valid. 
Marc: We should do this in a transport agnostic way 
Sunil: My proposal has some solutions 
Russell: Lets agree that this is an issue 

8. There is no way to indicate that parameters go into the 
header. We  need something like addParameterAsHeader(...) and 
setReturnTypeAsHeader(...). This might be tied too closely 
to the SOAP  protocol, but when you're using SOAP you need a 
way to do this.

Marc:Same as above. 
 

9. We are missing some SOAP properties. We have style, we 
also need use. And what about wrapped? 

Russell: Goes away in the new proposal 

10 What's the point of making some properties optional? 
That doesn't help portability.

Marc: Which of them are optional? 
Russell: SoapAction, OpStyle, And EncodingStyle. 
  

Doug's list of problems:

DII without WSDL- 

Doug: Lot of them are duplicates to what Russell listed. 

-Serialization/deserialization of JavaBeans is not valid as 
there 
is no way to know what the order of the parameters are.

Doug:  Problem goes away. 

-parameterOrder can not be set on the parameters 
Doug:  Problem goes away. 

-attributes can not be set on parameters,return types 
Doug:  Problem goes away. 

-Wsdl information for JavaBean members is not accessible 
during runtime, without this information serialization/deserialization 
would most likely fail. 
Doug:  Problem goes away. 

-above is also true with arrays 
Doug:  Problem goes away.

- customers complain that according to the specification standard 
types, JavaBeans and Arrays are supported - actually out of the 
box this is not correct- in order for support the dii developer would 
need to register custom/implementation specific serializers - dii 
not-the specification does not state that this may/must be done 
Doug:  Problem goes away. 
-the specification is not clear about the expected behavior 
of the various flavors of service.createCall() 
Doug:  Not necessarily a DII problem. Which of them are 
configurable? Problem will still be there in the new 
proposal. Action Item to Doug to elaborate the problem. 

-configuration of parameters,return types, and operations 
for doc/lit and rpc/lit  are not intuitive and are very error prone. 
Doug:  Problem goes away. 

Russell: Issue with fault. Not sure how this works on the 
new proposal yet? Still an open issue. 

Action Item  to Marc to ponder on the faults in the new 
            proposal. 

Manoj’s list:

1. .To use Call API user needs to write lot of code. Most 
of this code is repetitive and can be easily generated from 
the WSDL. By     asking user to write all this code by hand increases 
the chance for errors.

Manoj: Problem is less often in the new proposal. 

  2.Parameter names, endpoint URL, properties, etc are hard 
coded in the user code. If there is any change in the WSDL, 
user     needs to find and replace all these values. 

Manoj: Without the WSDL use case 
 

  3.Since Call API is given a prominent place in the spec, 
the first thing a new JAX-RPC user tries out is Call. And 
typically 
    concludes (unless they dig around enough to find stub) 
that JAX-RPC is so much more difficult to use than other 
platforms.

Marc:  Call2 will be more XML centric 
Manoj: We should say that DII is for advanced users only. 
Marc: Spec. could talk about layers. Talk about pros and cons. 
Sunil: should not say one is recommended and other is not 
Marc: Yes, DII should be mandatory 
 

  4.Call API kind of implies how the JAX-RPC spec can be 
implemented. If the spec only contains stub based invokes, 
I think, I 
    have more flexibility in choosing a design. 

Manoj: This problem is more pertinent with the old APIs and 
              less od an issue in the new proposal. 

Marc: How to position the old Call API? 
Russell: It will be cleaner to leave it,, but may need to 
have it for backward compatibility 
Russell: Can we deprecate it? 
Marc: TBD. Find about the logistics with deprecation. 
  
 

6. Sunil's DII enhancements proposal: 
  
  
http://archives.java.sun.com/cgi-bin/wa?A1=ind0401&L=jsr-224-eg#11 

and threads at: 
 

http://archives.java.sun.com/cgi-bin/wa?A1=ind0311&L=jsr-224-eg#4 

http://archives.java.sun.com/cgi-bin/wa?A1=ind0311&L=jsr-224-eg#9 

We've been concentrating on the async aspects of DII, there 
are other 
parts of Sunil's proposal that we also need to address:

(i) Header manipulation

Marc: Still an outstanding issue. 

(ii) Support for attachments 
Marc: Still an outstanding issue. 

(iii) Per Call handlers 
Marc: Still an outstanding issue. 
(iv) Type Mapping

Sunil: Not an issue with the new proposal 

(v) Operations in Port 
Sunil: Not an issue with the new proposal 

(vi) Transport settings 
Marc: Transport agnostic APIs/Classes is our high level requirement anway 
           We should address this as a separate issue 

(vii) Bi-Directional Oneway Message Exchange 
  
Marc: We should design a handler framework that facilitates such
capabilities and we shouldn't have any first class support
for correlations.
 