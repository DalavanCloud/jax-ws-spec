Minutes of Oct 16th JSR224 concall.

1. Roll Call, scribe for minutes selected from attached list.

Present
ATG	Jim Frost
IBM	Russell Butek
Novell 	Bjarne Rasmussen
Oracle	Sunil Kunisetty
Sun	Marc Hadley
Sun	Roberto Chinnici
Sun	Doug Kohlert

Regrets
SAP 	Chavdar Baikov
Sosnoski Software	Dennis Sosnoski
WebMethods Corporation 	Prasad Yendluri

Absent
BEA 	Manoj Cheenath
IONA 	Daniel Kulp
Motorola 	Rahul Sharma
NTT Data	Toshiyuki Kimura
Pramati	Rajiv Shivane
SeeBeyond 	Alan Davies
Sonic	Glen Daniels
TMaxSoft	JaeWoong Chung

2. Agenda Review and AOB

3. Approval of Oct 9th telcon minutes

See https://jsr224.dev.java.net/meetings/Minutes20031009.txt

Minutes were approved.

4. Review action items

See https://jsr224.dev.java.net/

Marc to contact JSR 181 spec lead re alignment and timelines. 
- No response from JSR181 spec lead.  Marc will follow up.

Marc to rewrite JSR109 relationship goal to make relationship clearer. 
- JSR109 goal rewrite done.

Marc to go through 1.1 issues posted to list and post disposition to list. 
Done

Sunil to send proposal for async client API - due early Nov. 
Pending

Marc to contact JSR 208 spec lead re requirements on JSR 224. 
- JSR208 contact made, will forward us requirements.

Marc to split backwards compatibility non-goal to make binary compatibility goal clearer. 
Done

Sunil to send proposal for enhanced DII API - due early Nov. 
Pending

All to study Sunil WS-I proposal and start discussion on the mailing list. 
Done

5. Goals Discussion

Sunil proposed:

(a) WS-I conformance model

Sunil: Wants explicit model for indicating WS-I conformance.
       JSR109 will have deployment descriptor?
       Extend schema validation, container logging.

Marc: JAXB gives us schema checking "for free", we should just
      explicitly say we'll use that. Will add mention of this to JAXB
      integration requirements.

Marc: WS-I gives some conformance tools:

      - Interceptor (like an HTTP proxy).  Logs messages.
      - Analyzer.  Message log as input, can check conformance.
        Produces report of tests it did and pass/fail.

      Tools only give about 30% coverage.  It's been suggested that
      JAX-RPC could produce its own log rather than using WS-I
      interceptor.  This would ease configuration.  Would also work
      with HTTPS, while interceptor really doesn't.

      Does this belong in JSR109 or JAX-RPC?

Bjarne, Sunil like having it in JAX-RPC.

Russell thinks this is container information and that logging API is
beyond what we're really trying to do.  Hard to integrate with vendor
logging schemes.

Roberto: Useful for standalone JAX-RPC client?

Marc: Does this relate to transport-level handlers?

Russell thinks this would be a good use for handlers, but doesn't know
if we want to put specific handler definitions into JAX-RPC spec.

Marc agrees that this could be one of the use cases for handlers.

[Jim asks after-the-fact: Are we thinking of providing standard
handlers, or just making sure we can satisfy a use case?  If so, this is
an obvious one to provide.] [Marc replies after-the-fact: just maing
sure we can satisfy a use case.]

Sunil: Not sure if we can achieve everything with a handler.

Bjarne thinks this is so common that we probably should build it in.

Sunil agrees that if we made this a use case we had to support with
handlers, then that'd be ok.  Group assented to this suggestion.

Marc will add a use case for this.

Inbound/outbound message checking facility:

Marc wonders how such a thing would relate to WS-I testing tools?
Thinks that the definition of these things is better left to WS-I.

Russell thinks that this is best as another handler.  Jim agrees.

Russell "nominally volunteers" to do integration of WS-I with a
handler.

Marc and Russell discussed whether Eclipse has a WS-I tool
integration.

Marc agrees that we need some way to indicate which profile we're
conforming to.  But where would we put that?

Russell?: Just indicating that it's conformant doesn't mean it really
is.

Sunil: Want to check the WSDL for compliance at deployment time.

Marc: Was thinking more of doing it at code generation time.

Sunil says that the WSDL checking has to be done at deployment.

Marc thinks the deployment descriptor needs to indicate not only that
you want to be WS-I conformant, but more specifically which version.

Sunil agrees.

Marc asks if JAX-RPC 1.1 requires option for specifying WS-I
compatibility?

Roberto thinks there's no metadata for this, but it's inferred.

Marc: What should we do differently if we had explicit compatibility?

Sunil: If we have it explicit, we can avoid a lot of checks for
       conformance that we do now.  Thinks it would be better to do it
       only if the application actually wants it.

Marc thinks the default behavior should be WS-I conformant.  Sunil
agrees.

Marc?: So what difference does it make to explicitly tell the
framework if we're going to do it anyway?

Sunil: Use case would be non-WS-I conformant app [also other use case
       I didn't catch].

Marc: Do we require JAX-RPC WSDL compiler to complain when
      non-WSI-compliant behavior detected if a compliance flag given?

General agreement.

Russell: Not sure if JAX-RPC should mandate WS-I compliance checking
         in the tools.

Sunil: We do this kind of thing anyway, thinks we should make it
       optional.

Russell: Would prefer to be able to plug in WS-I tools rather than
         rewriting everything.

Sunil: Problem right now is that we might fail even at deployment
       time.  "Quite a few use cases" for where you might want to
       deploy it anyway.

Russell didn't think that this was a problem in JAX-RPC 1.1, but Sunil
says otherwise.  Roberto? agrees with Russell, but says the server
/might/ reject it.  Sunil wants the behavior standardized.

[There was some discussion about exactly how we could explicitly
specify this stuff for message types that aren't standardized, but I
confess that I didn't follow enough of that to record it.]

Marc: Want more concrete proposal for explicit versus implicit.
Asked Sunil to annotate JAX-RPC 1.1 for what changes would have to be
made.  Sunil agrees.

ACTION: Sunil to annotate changes.

(b) Nillable types issue

Sunil says one solution for this is to define our own types for this,
mapping them to Java object references.  Complex, but effective.

Marc wants to know if we could always map to a holder.  Sunil agrees
that this would work.  Roberto thinks this would be a lot less usable.

Russell agrees that this is an issue, definitely should be on the list
of things to solve.  Marc added it.

Marc will create issue.

Bjarne proposed:

(c) Sealing handler chains

Use case: Have a set of handlers, last handler is doing something like
digital signature.  Framework provider might want to prevent someone
from messing with that.

Marc: Where would "sealant" be applied?  Handler descriptor?

Jim: Why do we care if they want to shoot themselves in the head?

Russell agrees, can think of cases where they might want to do that,
eg if application wants its own logger.  Sunil agrees that this
flexibility is a good idea, too, so says we should be really careful
about this kind of thing.

Marc: Should we add this as an issue to the handler framework?  When
handler framework is more described we can revisit this.

Russell suggests marking this as an issue rather than as a goal,
general assent.

Marc will create issue.

Marc wants us all to prioritize which goals are important to us.

ACTION: Marc will send out an email with a list of goal summaries for
us to prioritize via email.
