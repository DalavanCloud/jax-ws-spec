Attendees (in order of appearence): Marc (Sun), Rajiv (Sun), Doug (Sun), Roberto (Sun), Sanjay (SAP), Anish (Oracle), Chen (Oracle), Bjarne (Novell), Brian (BEA), Jeff (Oracle). Greg (Oracle)

(i) Renaming Proposal

Roberto: Need to start closing on the renaming proposal. Java One coming up and we'd like to get more feedback from developers. Also starting to feel some pressure from J2EE schedule. Need to release public draft soon and renaming is biggest issue blocking that at the moment.

Roberto reviews the email he sent to the EG list:

<quote>
Here's a more detailed description of the steps involved:

1) Move the new API classes (Dispatch, Provider, etc.) into the
javax.xml.ws package. We chose this package name to minimize confusion
with the JSR-181 annotations and send the message that the new API is
part of the JAX-* family. This is important because JAX-WS users will
be using JAXB on a daily basis, and may commonly use SAAJ and JAXP
classes as well.

2) Clone some older API classes (Service, ServiceFactory) into the
javax.xml.ws package, so that the new APIs do not depend on JAX-RPC 1.1.
The number of classes that will be cloned is < 10.

3) Remove some of the ugliness that resulted from having had to work
within the constraints of binary compatibility with JAX-RPC 1.1, as
well as some methods that refer to JAX-RPC 1.1-only classes (e.g the
Call interface).

4) The technology itself will be renamed to JAX-WS 2.0, The Java
API for XML Web Services. Note the 2.0 version number -- we think this
will send a stronger message to our users that this API was not created
from scratch but is an evolution of JAX-RPC 1.1. And of course using
"WS" in the name instead of "RPC" would help clear up some common
mis-perceptions on the capabilities of this technology.

We'll be sending out shortly the javadocs for the new APIs with a
commentary on the changes that we made at step 4.

As detailed in our previous message on the subject, the plan for the
platforms is the following: J2EE 5.0 will require both JAX-RPC 1.1
and JAX-WS 2.0, whereas J2SE 6.0 will require JAX-WS 2.0 but not
JAX-RPC 1.1. A maintenance review of JSR-109 will bring JAX-WS 2.0 into
the picture and spell out the packaging and deployment requirements in
J2EE 5.0.

In evaluating the proposal, please bear the following in mind.

Since the inception of JAX-RPC 2.0 we've been working on the basis that
JAXB 2.0 would take care of all the data binding. This is the only way
we can get rich, user-friendly method signatures in service endpoint
interfaces, deliver support for 100% of XML Schema (as our users have
requested), and maintain portability for all generated classes, all
in a timely fashion.

The decision to adopt the renaming proposal does have an impact on
users who want to migrate their existing applications to JAX-RPC 2.0.
We believe that tools will take the lead in easing this migration, and
indeed the necessary changes fall under the "refactoring" label, albeit
a somewhat delicate one. Compared to the migration costs caused by the
changes in data binding, the package renaming is a minor inconvenience.
The benefits of having a cleaner, simpler, more consistent API for Web
services are clear. We strongly believe that the JAX-WS API will give
us an excellent platform from which to compete with Indigo, and we look
forward to evolving it by incorporating support for additional WS-*
technologies via JSRs such as JSR-261 and JSR-265.

We'd like to have a conference call next Thursday (5/5) to discuss
the proposal in more detail. We'll send out the call info by early
next week. By all means, try to attend if at all possible. In the
meantime, I encourage you to make your position on this proposal as
clear as possible using the EG mailing list. Although we go by the
"silence means assent" rule, for an important proposal such as this
one we'd very much like to hear everybody's voice.

[1] http://jcp.org/aboutJava/communityprocess/edr/jsr224/index3.html
[2] https://jax-rpc.dev.java.net/jaxrpc20-ea/
</quote>

Chen: question to clarify binary vs source compatibility.

Roberto: JAXB mapping is different to JAX-RPC but might be possible to recover 1.1 mapping by using customizations or annotations. Probably not possible automatically, will require developer intervention.

Roberto: reiterates that cumulative effect of a number of smaller changes in the new APIs sent to the list results in a much cleaner and simpler technology.
Roberto: Open floor for comments

Anish: Oracle concerned about compatibility aspects and impact on customer uptake. Worried that current proposal isn't sufficiently complete to avoid the need for a futher breaking change in the future (cites need for integration with addressing, policy, annotations etc). Competition with Indigo is a concern.

Greg: Draws parallel with EJB. Current V3 is suffering due to previous iterations and is worried that same thing will happen with WS in Java. Would rather take current 1.1 model with some extensions (async, alternate data binding) rather than move forward with JAX-WS now.

Roberto: We are also concerned with Indigo competition, think that JAX-WS provides a much cleaner basis for competition.

Greg: Casts JAX-WS as an intermediary step, still RMI-like.

Roberto: Thinks we shoudl be able to agree on a more incremental approach to competing with Indigo, no need to do everything in one big step.

Bjarne: Potential downsides to change are outweighed by the benefits. New APIs are good and would benefit from new packaging.

Roberto: Our assumption is that if people are quiet then they are happy with what is being proposed.

Brian (?): Is there anything in JAX-WS proposal that needs to be revisited in light of addressing ?

Roberto: Thinks that we need to carefully examine handler framework but at higher level there's no need to boil the ocean right now. Security annotations in JAX-WS are an example of this, no fundamental change required.

Greg: Asks about alignment with JBI and whether a channelized approach as in Indigo would bear on the alignment.

Roberto: Some of the work done for JAX-WS in the area of bindings touches on this alignment. Doesn't think we need to follow the MEP-based approach of JNI is necessary, handler framework is now written in terms of messages rather than just request-response and this is probably sufficient.

Roberto: Would be open to discussion on how Dispatch and Provider can be modified to support more complex MEPs.

Jeff: How are we going to close on this

Roberto: Will send one more email polling the group and will hold a call next week - anyone who has concerns needs to speak up by then or we'll assume assent to the proposal.



