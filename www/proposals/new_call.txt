A new simplified Call2 interface
===============================

public interface CallAsyncHandler {
    void handleResponse(org.w3c.dom.Element msg);
    void handleResponse(javax.xml.bind.Element msg);
    void handleFault(java.lang.Exception e, org.w3c.dom.Element
inputMsg);
    void handleFault(java.lang.Exception e, javax.xml.bind.Element
inputMsg);
}

interface CallSetup {
    void setJAXBContext(JAXBContext ctx);
    JAXBContext getJAXBContext();
    void setTargetEndpointAddress(String address);
    String getTargetEndpointAddress();
    void setProperty(String name, Object value);
    void removeProperty(String name);
    Object getProperty(String name);
    java.util.Iterator getPropertyNames();
}

interface Call2 extends CallSetup
{
       Call clone();

       org.w3c.dom.Element invoke(org.w3c.dom.Element msg)
               throws java.rmi.RemoteException;
       javax.xml.bind.Element invoke(javax.xml.bind.Element msg)
               throws java.rmi.RemoteException;
       void invokeOneWay(org.w3c.dom.Element msg);
       void invokeOneWay(javax.xml.bind.Element msg);
}

interface CallAsync extends CallSetup {
       CallAsync clone();

       // polling versions of invoke methods
       AsyncResponse<org.w3c.dom.Element> invoke(
               org.w3c.dom.Element msg) throws java.rmi.RemoteException;
       AsyncResponse<javax.xml.bind.Element> invoke(
               javax.xml.bind.Element msg) throws
java.rmi.RemoteException;
       // do we need async variation of invokeOneWay ?

       // callback version of invoke methods
       AsyncResponse<?> invoke(
               org.w3c.dom.Element msg,
               CallAsyncHandler h) throws java.rmi.RemoteException;
       AsyncResponse<?> invoke(
               javax.xml.bind.Element msg,
               CallAsyncHandler h) throws java.rmi.RemoteException;
}

The Object returned from AsyncResponse<?>.get(...) has no standard type.
Client code should not attempt to cast the Object to any particular
type as this will result in non-portable behaviour.

Call2 and CallAsync are not thread safe. Use of the same instance in
multiple threads requires considerable care - use of the clone() method
is recommended where multiple threads would like to  is required.

The JAXP javax.xml.transform.Source might be a better choice than
org.w3c.dom.Element.

